
Team Ratolotls
Gloria Lee
Jack Chen
Kevin Cheng
APCS pd08

Pomenon - a pokemon simulator


/////////// Zone of Reflection \\\\\\\\\\\
------------------------------------------
OBSTACLES OVERCOME:
- How to use input file to generate map (haha assuming we figure this out...)
- Figuring out how to use the type system in an effishient/logical way

UNRESOLVED ISSUES:
- WHERE MAIN METHOD? WHEN CAN I PLAY? - frustrated player

COOL STUFF LEARNED:
- clown nose in processing
- more to come...

MID DEVELOPMENT GAME DESIGN CHANGES:
- Changed the Type to belong to Moves instead of Pomenons themselves.

LESSONS LEARNED:
- Always a good idea to have consistent variable names! For ease of understanding!
- How to use scanner to create map.
- Clown nose go brrrr
||||||||||||||||||||||||||||||||||||||||||



 ______   ______   __   __   __       ______   _______
/_____/\ /_____/\ /_/\ /_/\ /_/\     /_____/\ /______/\
\:::_ \ \\::::_\/_\:\ \\ \ \\:\ \    \:::_ \ \\::::__\/__
 \:\ \ \ \\:\/___/\\:\ \\ \ \\:\ \    \:\ \ \ \\:\ /____/\
  \:\ \ \ \\::___\/_\:\_/.:\ \\:\ \____\:\ \ \ \\:\\_  _\/
   \:\/.:| |\:\____/\\ ..::/ / \:\/___/\\:\_\ \ \\:\_\ \ \
    \____/_/ \_____\/ \___/_(   \_____\/ \_____\/ \_____\/
    TNPG: Ratolotls

   
//=============================================================================//
5/22/2022
TIME SPENT: 1hr

Gloria and Jack:
* Got basic classes and their instance vars down (Pomenon, Player, etc.)
* Set up inheritance stuff
* Established working TODO List



//=============================================================================//
5/23/2022
TIME SPENT: 1hr

Gloria and Jack:
* Got PomType and Moves up and running :)
* Implemented a simple attack (maybe we can extend it more in future)
* dammit we had homework.

TODO:

* Create Game file with Battle method in it
* Battle method uses Pokemon attack and check is checkDead
* Change the attack so that it takes into the account of the type of the move and not the
type of the pokemon. So isWeakness uses the type of the move instead of the type of the attacking Pokemon
    * Small side chore is to change the Moves.java to include TYpe as a variable
* Create methods that call the Team for the pomenons int the form of a LList
* Try to figure our how thread.sleep works so that we can use it in our final project

//=============================================================================//
5/24/2022
TIME SPENT: 1hr

Gloria and Jack:
* Change the moves to have a type and for isWeakness to take into account the type of the move
* Start working in the Game file...

TODO:
* Continue working on Battle() and the Pomenon Team in Player.java
* Possible idea: add stats to our Pomenons like speed, attack, defense

//=============================================================================//
5/25/2022
TIME SPENT: 1 hr

Gloria and Jack:
* In class, we updated Map.java so it can scan input files as maps
* Working on UML diagrams, debugging Player.java later
Kevin: Created checks for valid team

TODO:
* Debug Player.java
* Work on Map.java
  * Make player appear on maps
  * Make player able to move around on the map as it updates in the terminal
* Consider possibility of graphics?

//=============================================================================//
5/26/2022
TIME SPENT: 1hr

Gloria and Jack:
* In class, we updated Map.java so that it doesn't require input from the terminal to scan a map. Instead,
 it now scans the same file every time so we can run Map without specifying which map :)
* Worked on the details of how player moves would work. Input? Static vs nonstatic? Errors abound...
* At home, worked together on completing UML diagrams


TODO:
* user moves go brrr
* why static nonstatic error >:(

//=============================================================================//
5/27/2022
TIME SPENT: 1 hr

Gloria and Jack:
* In class, we worked on taking user input to move the player character.
* We got it to work! But now,
* we have to solve the issue of how to revert the player's old spot to original map ....
* grass grass grass bby

TODO:
* reverting old spot once moved on
* uml diagrams

//=============================================================================//
5/28/2022
TIME SPENT: 1hr

Gloria and Jack:
* made v2!
* created baseline code for reverting old tile to what is was before player landed on it
* code has a few logistics errors, we'll think more about them tmw...
* worked on map1 to make it bigger/better

TODO:
* fixing playerMove buggies
* make more maps?

//=============================================================================//
5/29/2022
TIME SPENT: 1 hr

Gloria:
* Finally found the reason for the bug after heavy tracing
* Player move works successfully now!
* Expanded on map1 ... added colors!

TODO:
* make more maps
* make sure grass works
* start working on battle system display
* start working on catching system?

//=============================================================================//
5/30/2022
TIME SPENT: 1.5 hr

Gloria and Jack:
* Finalized uml diagrams
* Finalized map1
* Worked on Woo.java
* Created working method in Pomenon to choose move.

TODO:
* Fix a buggie that causes a String outofbounds exception error to be thrown when a
  player gives a blank input (oh no but we can always just let them suffer :))
* Add in attack with each chosen option in choose move! <- yeah!
* CONTINUE choosePomenon() IN PLAYER!!! DO NOT FORGOR OR FUTURE ME WILL VERY REGRETTI
* Continue to work on the battle in Game.java

//=============================================================================//
5/31/2022
TIME SPENT: 1.5 hr

Gloria and Jack:
* Fixed up UMLs for relationships.....
* Successful battle method implementation!
* Wrote some preliminary code to test our methods.
* Got individualBattle to work as intended
* Did some minor formatting CHANGES
* Finished an edited flowchart 

TODO:
* add while loop to player input for move to avoid out of bounds errors 
* choosePomenon() method needs work ☑
* battle display?? 





 TODO LIST:


    * Display class which will display the map and control refreshing the display with each character move
    * Perhaps a display map (2D array) and a display battle class for better separation of displays
    * Find a way to generate the map using text input within txt file like with the mazes




    * Create class called Moves ☑
    * Pomenons needs an ArrayList<Moves> ☑
    * Player needs an ArrayList<Items> ☑
    *  Within Pomenon class:
      public boolean attack(Pomenon me, Pomenon enemy ) ☑
      public boolean checkDead() - returns true if dead because 0 health ☑
    * A Game class and a Woo file that runs the actual game
    * Set up battle method within


